//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
public class TeamInfo
{
	public Color32 teamColor;
	public Color32 tileColor;
	public Color32 beaconColor;
	public Color32 highlightColor;
	public Vector2 startingLocation;
	public int teamNumber;
	public float score;
	public List<Color32> marqueeColorList;
	public Texture scoreTexture;
	public Texture winTexture;
	
	public TeamInfo ()
	{
		score = 0;
		marqueeColorList = new List<Color32>();
	}

	public static TeamInfo GetTeamInfo(int teamNumber){
		TeamInfo returnable = new TeamInfo ();
		switch (teamNumber) {
			case 1: 
				returnable.teamColor = new Color32 (17, 75, 141, 255);
				returnable.tileColor = new Color32 (88, 151, 209,255);
				returnable.beaconColor = new Color32 (108, 55, 168, 255);
			// maybe purple 133, 75, 198, 255
			//good beacon color (21, 86, 163, 255)
				returnable.startingLocation = Settings.SettingsInstance.team1Start;
				returnable.teamNumber = teamNumber;
				returnable.highlightColor = new Color32 (17, 75, 141, 150);
				returnable.scoreTexture = (Texture)Resources.Load("Sprites/ScorebgTextureblue");
			returnable.winTexture = (Texture)Resources.Load("Sprites/victoryScreen-blue");

				break;
			case 2:
				returnable.teamColor = new Color32 (247, 180, 40, 255);
				returnable.tileColor = new Color32 (255, 190, 50,255);
		//		returnable.beaconColor = new Color32 (0, 165, 80, 255);
				returnable.beaconColor = new Color32 (249, 98, 45, 255);
			//239, 110, 34, 255
				returnable.startingLocation = Settings.SettingsInstance.team2Start;
				returnable.teamNumber = teamNumber;
				returnable.highlightColor = new Color32 (247, 180, 40, 150);
			returnable.scoreTexture = (Texture)Resources.Load("Sprites/ScorebgTexturebyel");
			returnable.winTexture = (Texture)Resources.Load("Sprites/victoryScreenYellow");
				break;
		}

		byte colorOffset = 0;
		for(int i = 0;  i< Settings.SettingsInstance.marqueeCount; i++){
			Color32 c = new Color32( 
			((byte) (returnable.tileColor.r-colorOffset) > 0) ? (byte)(returnable.tileColor.r-colorOffset): (byte)1  ,
			                        ((byte)(returnable.tileColor.g-colorOffset) >= 0) ? (byte)(returnable.tileColor.g-colorOffset) : (byte)1 ,
			                        ((byte)(returnable.tileColor.b-colorOffset)>= 0) ? (byte)(returnable.tileColor.b-colorOffset) : (byte)1,
			(byte)255);
			returnable.marqueeColorList.Insert (0,c);
			colorOffset +=3;
		}
		return returnable;
	}

	
	public Color32 getHighLightColor(){ 
//		Color32 HighlightColor = teamColor;
//		HighlightColor.r+=100;
//		HighlightColor.b-=100;
//		HighlightColor.g-=100;

		Color32 HighlightColor = new Color32(7, 65, 131,255);
		return HighlightColor;
	
	}
	
	public GameObject goGetHomeTile(){
		return  GameManager.GameManagerInstance.tiles[(int)startingLocation.x, (int)startingLocation.y];
	}

	public void addScore(float score){
		this.score += score;
	}
	
	
}

